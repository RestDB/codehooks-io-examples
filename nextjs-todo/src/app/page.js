"use client";
import Head from "next/head";
import { useEffect, useState, useRef } from "react";

export default function Home() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [todo, setTodo] = useState("");
  const inputRef = useRef(null);

  const changeHandler = (event) => {
    setTodo(event.target.value);
  };

  const addTodo = (event) => {
    event.preventDefault();
    setLoading(true);
    fetch(`/api`, {
      method: "POST",
      body: JSON.stringify({todo})
    })
    .then((res) => res.json())
    .then(() => {
      loadTodos();
      setTodo(""); // This triggers the useEffect below
    });
  };

  const removeTodo = (ID) => {
    setLoading(true);
    fetch(`/api`, {
      method: "DELETE",
      body: JSON.stringify({todoID: ID})
    })
    .then((res) => res.json())
    .then(() => {
      loadTodos();
    });
  };

  const loadTodos = () => {
    fetch("/api", {method: "GET"})
    .then((res) => res.json())
    .then((data) => {
      setData(data);
      setLoading(false);
    });
  };

  useEffect(() => {
    setLoading(true);
    loadTodos();
  }, []);

  useEffect(() => {
    if (inputRef.current && !loading) {
      inputRef.current.focus();
    }
  }, [todo, loading]); // Re-focus after todo update and loading state change

  if (!data) return "Loading...";
  return (
    <div className="flex flex-col justify-between min-h-screen bg-gray-100">
      <Head>
        <title>TODO App with Next.js and Codehooks.io</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col justify-center items-center flex-grow">
        <div className="bg-white p-6 rounded-lg shadow-lg">
          <h1 className="text-2xl font-bold mb-4">
            TODO App with Next.js and Codehooks.io
          </h1>
          {loading ? (
            <img src="/loader.gif" alt="Loading" className="mx-auto" />
          ) : (
            <form onSubmit={addTodo} className="mb-4">
              <input
                className="w-full p-2 text-lg border-2 border-gray-200 rounded"
                type="text"
                name="todo"
                value={todo}
                onChange={changeHandler}
                placeholder="Enter your exciting TODO item!"
                ref={inputRef}
              />
            </form>
          )}

          <ul>
            {data.map((item) => (
              <li key={item._id} className="cursor-pointer">
                <a
                  href="#"
                  onClick={() => removeTodo(item._id)}
                  className="block p-2 hover:line-through"
                >
                  {item.message}
                </a>
              </li>
            ))}
          </ul>
        </div>
      </main>

      <footer className="text-center p-4">
          <a href="https://codehooks.io" className="text-blue-500 hover:underline">
            Example app by Codehooks.io
          </a>
      </footer>
    </div>
  );
}
